---
import Layout from "@layouts/Layout.astro";
import Person from "@components/Person.astro";
import AddPerson from "@components/AddPerson.astro";
import Logo from "@components/Logo.astro";
import RoomTitle from "@components/RoomTitle.astro";
import { turso } from "../../turso";

const { roomId } = Astro.params;
if (!roomId) throw new Error("Room ID is undefined");

const { rows: rooms } = await turso.execute({
  sql: "SELECT * FROM room WHERE id = ?",
  args: [roomId as string],
});
let roomName = roomId as string;
let pageTitle = "Your turn";
if (rooms.length === 0) {
  turso.execute({
    sql: "INSERT INTO room (id, name, alter_date) VALUES (?,?,?)",
    args: [roomId as string, roomId as string, new Date()],
  });
} else {
  roomName = rooms[0].name as string;
  pageTitle = roomName + " - Your turn";
  turso.execute({
    sql: "UPDATE room SET alter_date = ? WHERE id = ?",
    args: [new Date(), roomId as string],
  });
}

const { rows: peopleData } = await turso.execute({
  sql: "SELECT id, name FROM person WHERE room_id = ? order by position",
  args: [roomId as string],
});
---

<Layout title={pageTitle}>
  <div class="flex items-center space-x-4">
    <a href="/"><Logo width={100} height={100} /></a>
    <RoomTitle roomId={roomId}>{roomName}</RoomTitle>
  </div>
  <div class="space-y-4" id="list-people">
    {
      peopleData.map((person, i) => (
        <Person
          id={person.id as string}
          position={i}
          nPeople={peopleData.length}
        >
          {person.name as string}
        </Person>
      ))
    }
  </div>

  <div class="mt-4">
    <AddPerson />
  </div>

  <div id="people-data" data-people={JSON.stringify(peopleData)}></div>

  <div id="template-person" class="hidden">
    <Person id="person-id" position={0} nPeople={peopleData.length}
      ><slot /></Person
    >
  </div>

  <script>
    import { people } from "../../store.ts";
    import type { PersonDto } from "../../personDto.ts";

    const peopleElement = document.getElementById("people-data") as HTMLElement;
    if (peopleElement) {
      let peopleFromServer: PersonDto[] = JSON.parse(
        peopleElement.dataset.people as string
      );
      console.log("peopleFromServer", peopleFromServer);
      people.set(peopleFromServer);

      const listPeopleElement = document.getElementById("list-people") as HTMLElement;
      if (listPeopleElement) {
        listPeopleElement.addEventListener("click", (event) => {
          const element = event.target as HTMLElement;
          if (element) {
            const personDiv = element.closest(".person");
            if (personDiv) {
              if (element.classList.contains("remove")) {
                peopleFromServer = remove(peopleFromServer, personDiv.id);
              }
              if (element.classList.contains("up")) {
                peopleFromServer = up(peopleFromServer, personDiv.id);
              }
              if (element.classList.contains("down")) {
                peopleFromServer = down(peopleFromServer, personDiv.id);
              }
              console.log("peopleFromServer", peopleFromServer);
            }
          }
        });
      }

      const remove = (people: PersonDto[], personId: string) => {
        return people.filter((person) => person.id + "" !== personId);
      };

      const up = (people: PersonDto[], personId: string) => {
        const index = people.findIndex((person) => person.id + "" === personId);
        if (index > 0) {
          const personToMove = people[index];
          people.splice(index, 1);
          people.splice(index - 1, 0, personToMove);
        }
        return people;
      };

      const down = (people: PersonDto[], personId: string) => {
        const index = people.findIndex((person) => person.id + "" === personId);
        if (index < people.length - 1) {
          const personToMove = people[index];
          people.splice(index, 1);
          people.splice(index + 1, 0, personToMove);
        }
        return people;
      };


    }
  </script>
</Layout>
